--- 
logical: 
  submissions: 
    heading: 
      algorithm:           {domain: String}
      sample:              {domain: String}
      take:                {domain: Float}
      dfa_size:            {domain: Integer}
      index:               {domain: Integer}
      sample_size:         {domain: Integer}
      positive_count:      {domain: Integer}
      negative_count:      {domain: Integer}
      real_time:           {domain: Float}
      total_time:          {domain: Float}
      user_time:           {domain: Float}
      system_time:         {domain: Float}
      false_positive:      {domain: Integer}
      false_negative:      {domain: Integer}
      true_positive:       {domain: Integer}
      true_negative:       {domain: Integer}
      accuracy:            {domain: Float}
      error_rate:          {domain: Float}
      precision:           {domain: Float}
      recall:              {domain: Float}
      f_measure:           {domain: Float}
      false_positive_rate: {domain: Float}
      false_negative_rate: {domain: Float}
      true_positive_rate:  {domain: Float}
      true_negative_rate:  {domain: Float}
      positive_predictive_value: {domain: Float}
      negative_predictive_value: {domain: Float}
      sensitivity:         {domain: Float}
      specificity:         {domain: Float}
      positive_likelihood: {domain: Float}
      negative_likelihood: {domain: Float}
      balanced_classification_rate: {domain: Float}
      balanced_error_rate: {domain: Float}
      harmonic_bcr:        {domain: Float}
    constraints: 
      pk_submissions:      {type: primary_key, 
                            attributes: [algorithm, sample, take]}
  accuracy_avg:
    SELECT algorithm, 
            dfa_size, 
                take, 
         COUNT(index)       AS runs, 
         AVG(accuracy)      AS accuracy_avg, 
         STDDEV(accuracy)   AS accuracy_stdev, 
         AVG(error_rate)    AS error_rate_avg,
         STDDEV(error_rate) AS error_rate_stdev
      FROM submissions 
      GROUP BY algorithm, dfa_size, take 
      ORDER BY algorithm, dfa_size, take;
  time_avg:
    SELECT algorithm, 
            dfa_size, 
                take, 
         COUNT(index)       AS runs, 
         AVG(total_time)    AS total_time_avg, 
         STDDEV(total_time) AS total_time_stdev
      FROM submissions 
      GROUP BY algorithm, dfa_size, take 
      ORDER BY algorithm, dfa_size, take;
--- 
physical: 
  indexes: {}

